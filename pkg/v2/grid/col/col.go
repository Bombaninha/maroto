package col

import (
	"fmt"
	"github.com/johnfercher/go-tree/tree"
	"github.com/johnfercher/maroto/internal"
	"github.com/johnfercher/maroto/pkg/v2/config"
	"github.com/johnfercher/maroto/pkg/v2/domain"
)

type col struct {
	isMax         bool
	size          int
	components    []domain.Component
	rows          []domain.Row
	config        *config.Maroto
	autoGenerated bool
}

func New(sizes ...int) domain.Col {
	size := 0
	isMax := true

	if len(sizes) != 0 {
		size = sizes[0]
		isMax = false
	}

	return &col{
		size:  size,
		isMax: isMax,
	}
}

func (c *col) Add(components ...domain.Component) domain.Col {
	c.components = append(c.components, components...)
	return c
}

func (c *col) AddInner(rows ...domain.Row) domain.Col {
	c.rows = append(c.rows, rows...)
	return c
}

func (c *col) GetSize() (int, bool) {
	return c.size, c.isMax
}

func (c *col) GetStructure() *tree.Node[domain.Structure] {
	str := domain.Structure{
		Type:  "col",
		Value: fmt.Sprintf("%d", c.size),
	}

	node := tree.NewNode(str)

	for _, c := range c.components {
		inner := c.GetStructure()
		node.AddNext(inner)
	}

	return node
}

func (c *col) Render(provider domain.Provider, cell internal.Cell) {
	provider.CreateCol(cell.Width, cell.Height, c.config)

	for _, component := range c.components {
		component.Render(provider, cell)
	}

	return
}

func (c *col) SetConfig(config *config.Maroto) {
	c.config = config
	for _, component := range c.components {
		component.SetConfig(config)
	}
}
